
plugins {
    id 'java'
    // This time we're building a command-line executable application.
    id 'application'
}

apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.7"
}

repositories {
    mavenCentral()
}

dependencies {

    // Use the Jersey framework to make writing and testing servlets easier.
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet-core:3.1.0'
    implementation 'org.glassfish.jersey.containers:jersey-container-jetty-http:3.1.0'
    implementation 'org.glassfish.jersey.core:jersey-server:3.1.0'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:+'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:3+'
    // Use Jakarta (Java EE) for the servlet primitives.
    implementation 'jakarta.servlet:jakarta.servlet-api:5.+'
    // Use the Jetty server.
    implementation 'org.eclipse.jetty:jetty-server:11+'
    implementation 'org.eclipse.jetty:jetty-servlet:11+'
    implementation 'org.eclipse.jetty:jetty-webapp:11+'
    // We want to have some logging output if things go wrong, so use the simple console logger from SLF4J.
    // In our simple use case, the logger gets automatically configured by simply existing.
    implementation 'org.slf4j:slf4j-simple:+'
    
    // Reference the domain and persistence subprojects.
    implementation project(':domain')
    implementation project(':persistence')

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    // Also use the Mockito mocking framework to mock simple server functionality.
    testImplementation "org.mockito:mockito-core:2.+"

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

application {
    // Define the main class for the application.
    mainClassName = 'mancala.api.App'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

test.finalizedBy jacocoTestReport
